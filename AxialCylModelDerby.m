%% Derby Olbert Model for Axially Magnetized Permanent Magnet
 % ---------------------------------------------------------------------
 % This code provide an implementation of a closed-form model to compute 
 % the magnetic flux density of an axially magnetized permanent magnet.
 % The computation of the field requires the computation of the generalized
 % complete elliptic integrals (ref. Derby 2009). These are computed fastly
 % using the algorithm proposed by Burlisch, here implemented as an
 % auxiliary function, called GeneralizedEllipke.
 % The far field approximated equivalence with a Magnetic Dipole can be 
 % easily verifyied running "ModelTesting.m".
 %
 % Inputs:
 %    1) D      : diameter of the magnet                          [number]
 %    2) L      : length of the magnet                            [number] 
 %    3) M      : magnetization of the magnet                     [number]
 %    4) MagPos : the first three elements are the cartesian coordinates 
 %                of the center of the magnet, while the the latter three
 %                express the pose of the magnet, magnetic moment
 %                expressed as a unit vector                      [6x1]
 %    5) Point  : cartesian coordinates of the point feeling the field 
 %                generated by the magnet                         [3x1]
 %
 % Outputs:
 %    1) Brho   : radial component of the magnetic field          [number]
 %    2) Bz     : axial component of the magnetic field           [number]
 %
 % ATTENTION: the code consider every input vector as a column vector!
 % ---------------------------------------------------------------------
 % August 22nd, 2019                            Author: Federico Masiero
 % ---------------------------------------------------------------------
 
 %                                          Last check: October 6th, 2019
 
function [Brho,Bz] = AxialCylModelDerby(D,L,M,MagPos,Point)

%% Building of the Reference System centered in the magnet centroid
 % vector from the center of the magnet to point of interest
 x   = Point - MagPos(1:3);   
 % z-component is the projection of x onto the z-axis
 z   = x'*MagPos(4:6);      %x(3)
 % radial component is the x-component if we consider only a plane
 rho = sqrt(norm(x)^2-z^2); %x(1)

%% Computation of auxiliary variables
mu0     = 4*pi*1e-7; % void permeability
B0      = mu0*M/pi;  % simple Constant
R       = D/2;       % magnet radius

zP      = z + L/2;                  zM     = z - L/2;
alphaP  = R/sqrt(zP^2+(rho+R)^2);   alphaM = R/sqrt(zM^2+(rho+R)^2);
betaP   = zP/sqrt(zP^2+(rho+R)^2);  betaM  = zM/sqrt(zM^2+(rho+R)^2);
kP      = sqrt((zP^2+(rho-R)^2)/(zP^2+(rho+R)^2));   
kM      = sqrt((zM^2+(rho-R)^2)/(zM^2+(rho+R)^2));
gamma   = (R-rho)/(R+rho);

%% Computation of the field coordinates

Brho = B0*(alphaP*GeneralizedEllipke(kP,1,1,-1,1e-9) - ...
                    alphaM*GeneralizedEllipke(kM,1,1,-1,1e-9));
               
Bz  = B0*R/(R+rho)*(betaP*GeneralizedEllipke(kP,gamma^2,1,gamma,1e-9) - ...
                    betaM*GeneralizedEllipke(kM,gamma^2,1,gamma,1e-9));
